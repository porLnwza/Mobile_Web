from flask import Flask, render_template, redirect ,url_for,request,flash
from connection import connection_database, execute_data ,add_order_to_database, get_all_orders, update_order,get_customer_data,cancel_order
import pyodbc
import requests



# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask
app = Flask(__name__, template_folder="template", static_folder="static")
app.secret_key = 'your_secret_key_here'  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Flash messages

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
product = []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def get_all_orders():
    try:
        conn = pyodbc.connect("DRIVER={SQL Server};SERVER=GBSUPGRADE20220;DATABASE=istockcoop;Trusted_Connection=yes")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM tbOrderMobileSale")
        results = cursor.fetchall()
        return results
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return []
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
def search_orders(search_order):
    try:
        conn = pyodbc.connect("DRIVER={SQL Server};SERVER=GBSUPGRADE20220;DATABASE=istockcoop;Trusted_Connection=yes")
        cursor = conn.cursor()
        sql = """SELECT * FROM tbOrderMobileSale 
                 WHERE OrderName LIKE ? OR Orderphone LIKE ?"""
        cursor.execute(sql, ('%' + search_order + '%', '%' + search_order + '%'))
        results = cursor.fetchall()
        return results
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return []
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
@app.route('/', methods=['GET', 'POST'])
def home():
    search_order = request.form.get('search_order', '')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    all_orders = get_all_orders()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    if search_order:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        all_orders = search_orders(search_order)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    data_Customer = execute_data("SELECT * FROM tbCustomer") or []
    data_Customer_grp = execute_data("SELECT * FROM tbCustomerGrp") or []
    data_stock = execute_data("SELECT * FROM tbStock") or []
    all_orders = get_all_orders() or []  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ get_all_orders() ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ
        
    select_value = ""
    selected_customer = None
    customer_real_name = ""
    selected_phone = ""
    customer_group = ""
    select_stock = ""

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if "button_search" in request.form:
        select_value = request.form.get("customer_real_name", "")  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        selected_phone = request.form.get("selected_phone", "")
        customer_group = request.form.get("customer_group", "")
        select_stock = request.form.get("select_stock", "")

    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if select_value:
        for row in data_Customer:
            if row[0] == select_value:
                selected_customer = row[0]  
                customer_real_name = row[3]  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3
                selected_phone = row[5]  
                customer_group = row[1]  
                select_stock = row[4]  
                break

    if request.method == 'POST':
        if 'button_add' in request.form:
            customer_name = request.form.get('customer_real_name')
            model = request.form.get('select_stock')
            network = request.form.get('network')
            customer_group = request.form.get('customer_group')
            quantity = request.form.get('quantity')
            phone = request.form.get('selected_phone')

            if not all([customer_name, model, network, customer_group, quantity, phone]):
                flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error')
                return redirect(url_for('home'))

            customer_real_name = ""
            for row in data_Customer:
                if row[0] == customer_name:
                    customer_real_name = row[3]  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ column ‡∏ó‡∏µ‡πà 2 ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    break

            add_order_to_database(customer_real_name, model, network, customer_group, quantity, phone)
            flash('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')

            # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Line Notify
            url = "https://notify-api.line.me/api/notify"
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                "Authorization": "Bearer DxjRgaf2lch2M1LwOFysWq3aLuHoKtVIaDyvOT56jbN"
            }
            message_text = (f"‡∏£‡πâ‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ Dekkapo ÔºàÔø£Ô∏∂Ôø£Ôºâ‚Üóüì±\n"
                f"‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤üë§: {customer_real_name}\n"
                f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏áüõí: {model}\n"
                f"‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢üåè: {network}\n"
                f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ü´Ç: {customer_group}\n"
                f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ôüì±üõí: {quantity}\n"
                f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ü§ô: {phone}"
            )
            message = {"message": message_text}
            requests.post(url, headers=headers, data=message)

            return redirect(url_for('home'))
        else:
            flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error')

    return render_template(
        "home/home.html",
        data_Customer=data_Customer,
        data_Customer_grp=data_Customer_grp,
        data_stock=data_stock,
        selected_customer=selected_customer,    
        selected_phone=selected_phone,
        customer_group=customer_group,
        select_stock=select_stock,
        all_orders=all_orders,
        search_order=search_order 
    )

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@app.route('/edit_product', methods=['POST'])
def edit_product():
    data_Customer = execute_data("SELECT * FROM tbCustomer") or []
    customer_name = request.form.get('edit_customerName')
    model = request.form.get('edit_model')
    network = request.form.get('edit_network')
    customer_group = request.form.get('edit_customergrp')
    quantity = request.form.get('edit_quantity')
    phone = request.form.get('edit_phone')

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if not all([customer_name, model, network, customer_group, quantity, phone]):
        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error')
        return redirect(url_for('home'))


    customer_real_name = ""
    for row in data_Customer:
                if row[0] == customer_name:
                    customer_real_name = row[3]  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ column ‡∏ó‡∏µ‡πà 2 ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    break
    customer_data = get_customer_data()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_customer_data ‡∏à‡∏≤‡∏Å connect.py

    for row in customer_data:
        print(row)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ row
        if row.get('OrderName') == customer_name:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'OrderName' ‡∏°‡∏µ‡πÉ‡∏ô row ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö customer_name ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            customer_real_name = row.get('RealName', '')  # ‡πÉ‡∏ä‡πâ get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError
            break

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    try:
        update_order(customer_name, model, network, customer_group, quantity, phone)
        flash('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')

        # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Line Notify
        url = "https://notify-api.line.me/api/notify"
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            "Authorization": "Bearer DxjRgaf2lch2M1LwOFysWq3aLuHoKtVIaDyvOT56jbN"
        }
        message_text = (f"‡∏£‡πâ‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ Dekkapo ÔºàÔø£Ô∏∂Ôø£Ôºâ‚Üóüì±\n"
                        f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πàüõ†Ô∏è : ( ‚Ä¢ÃÄ œâ ‚Ä¢ÃÅ )‚úß\n"
                        f"\n‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤üë§: {customer_real_name}\n"
                        f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Çüõí: {model}\n"
                        f"‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢üåè: {network}\n"
                        f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ü´Ç: {customer_group}\n"
                        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ôüì±üõí: {quantity} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á\n"
                        f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ü§ô: {phone}"
        )
        message = {"message": message_text}
        requests.post(url, headers=headers, data=message)

    except Exception as e:
        flash(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", 'danger')

    return redirect(url_for('home'))



@app.route('/cancel_product', methods=['POST'])
def cancel_product():
    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ OrderID ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    order_id = request.form.get('order_id')
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô cancel_order ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
    if cancel_order(order_id):
        flash('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    else:
        flash('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'danger')
    
    return redirect(url_for('home'))  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ home

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
@app.route('/customer_name')
def customer_name():
    query = "SELECT * FROM tbCustomer"
    result_customer = execute_data(query)

    if result_customer:
        customer_text = result_customer
        conn_text = "Successful"
    else:
        customer_text = []
        conn_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbCustomer (‚î¨‚î¨Ôπè‚î¨‚î¨)"

    return render_template("customer_name/customer_name.html", customer_text=customer_text, conn_text=conn_text)

# ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
@app.route('/mobile_version')
def mobile_version():
    query = "SELECT * FROM tbCustomerGrp"
    result_customer = execute_data(query)

    if result_customer:
        customer_text = result_customer
        conn_text = "Successful"
    else:
        customer_text = []
        conn_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbCustomerGrp (‚î¨‚î¨Ôπè‚î¨‚î¨)"
   
    return render_template('mobile_version/mobile_version.html', customer_text=customer_text, conn_text=conn_text)

# ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Stock)
@app.route('/stock')
def stock():
    query = "SELECT * FROM tbStock"
    result_customer = execute_data(query)

    if result_customer:
        customer_text = result_customer
        conn_text = "Successful"
    else:
        customer_text = []
        conn_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbStock (‚î¨‚î¨Ôπè‚î¨‚î¨)"

    return render_template('stock/stock.html', customer_text=customer_text, conn_text=conn_text)

# ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
@app.route('/stockgrp')
def stockgrp():
    query = "SELECT * FROM tbStockGrp"
    result_customer = execute_data(query)

    if result_customer:
        customer_text = result_customer
        conn_text = "Successful"
    else:
        customer_text = []
        conn_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbStockGrp (‚î¨‚î¨Ôπè‚î¨‚î¨)"

    return render_template('stockgrp/stockgrp.html', customer_text=customer_text, conn_text=conn_text)

# ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Sale Type)
@app.route('/sale')
def sale():
    query = "SELECT * FROM tbSaleType"
    result_customer = execute_data(query)

    if result_customer:
        customer_text = result_customer
        conn_text = "Successful"
    else:
        customer_text = []
        conn_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbSaleType (‚î¨‚î¨Ôπè‚î¨‚î¨)"

    return render_template('sale/sale.html', customer_text=customer_text, conn_text=conn_text)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Flask
if __name__ == '__main__':
    app.run(debug=True)


# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Flask
if __name__ == '__main__':
    app.run(debug=True)
